{"ast":null,"code":"import axios from 'axios';\n\n// const API = axios.create({ baseURL: 'https://stackoverflow-clone-prod.herokuapp.com'})\nconst API = axios.create({\n  baseURL: `http://localhost:5000`\n});\nAPI.interceptors.request.use(req => {\n  if (localStorage.getItem('Profile')) {\n    req.headers.authorization = `Bearer ${JSON.parse(localStorage.getItem('Profile')).token}`;\n  }\n  return req;\n});\nexport const logIn = authData => API.post('/user/login', authData);\nexport const signUp = authData => API.post('/user/signup', authData);\nexport const postQuestion = questionData => API.post('/questions/Ask', questionData);\nexport const getAllQuestions = () => API.get('/questions/get');\nexport const deleteQuestion = id => API.delete(`/questions/delete/${id}`);\nexport const voteQuestion = (id, value) => API.patch(`/questions/vote/${id}`, {\n  value\n});\nexport const postAnswer = (id, noOfAnswers, answerBody, userAnswered) => API.patch(`/answer/post/${id}`, {\n  noOfAnswers,\n  answerBody,\n  userAnswered\n});\nexport const deleteAnswer = (id, answerId, noOfAnswers) => API.patch(`/answer/delete/${id}`, {\n  answerId,\n  noOfAnswers\n});\nexport const getAllUsers = () => API.get('/user/getAllUsers');\nexport const updateProfile = (id, updateData) => API.patch(`/user/update/${id}`, updateData);\nexport const postComment = data => API.post(`/comment/post`, data);\nexport const getComment = id => API.get(`/comment/get?qid=${id}`);\nexport const updateComment = (id, data) => API.patch(`comment/update?cid=${id}`, data);\nexport const deleteComment = id => API.delete(`/comment/delete?cid=${id}`);\nexport const getlocation = (lat, lon) => API.get(`/location?lat=${lat}&lon=${lon}`);","map":{"version":3,"names":["axios","API","create","baseURL","interceptors","request","use","req","localStorage","getItem","headers","authorization","JSON","parse","token","logIn","authData","post","signUp","postQuestion","questionData","getAllQuestions","get","deleteQuestion","id","delete","voteQuestion","value","patch","postAnswer","noOfAnswers","answerBody","userAnswered","deleteAnswer","answerId","getAllUsers","updateProfile","updateData","postComment","data","getComment","updateComment","deleteComment","getlocation","lat","lon"],"sources":["C:/Users/Ankita/Downloads/stackoverflow-main/stackoverflow-main/frontend/src/api/index.js"],"sourcesContent":["import axios from 'axios'\n\n// const API = axios.create({ baseURL: 'https://stackoverflow-clone-prod.herokuapp.com'})\nconst API = axios.create({ baseURL:`http://localhost:5000`})\n\nAPI.interceptors.request.use((req) => {\n    if(localStorage.getItem('Profile')){\n        req.headers.authorization = `Bearer ${JSON.parse(localStorage.getItem('Profile')).token}`\n    }\n    return req;\n})\n\nexport const logIn = (authData) => API.post('/user/login', authData);\nexport const signUp = (authData) => API.post('/user/signup', authData);\n\nexport const postQuestion = (questionData) => API.post('/questions/Ask', questionData)\nexport const getAllQuestions = () => API.get('/questions/get');\nexport const deleteQuestion = (id) => API.delete(`/questions/delete/${id}`) \nexport const voteQuestion = (id, value ) => API.patch(`/questions/vote/${id}`, { value })\n\nexport const postAnswer = (id, noOfAnswers, answerBody, userAnswered ) => API.patch(`/answer/post/${id}`, { noOfAnswers, answerBody, userAnswered })\nexport const deleteAnswer = (id, answerId, noOfAnswers) => API.patch(`/answer/delete/${id}`, { answerId, noOfAnswers})\n\nexport const getAllUsers = () => API.get('/user/getAllUsers');\nexport const updateProfile = (id, updateData) => API.patch(`/user/update/${id}`, updateData)\n\nexport const postComment = (data) => API.post(`/comment/post`, data)\nexport const getComment = (id) => API.get(`/comment/get?qid=${id}`)\nexport const updateComment = (id,data) => API.patch(`comment/update?cid=${id}`, data)\nexport const deleteComment = (id) => API.delete(`/comment/delete?cid=${id}`)\n\nexport const getlocation = (lat,lon) => API.get(`/location?lat=${lat}&lon=${lon}`)"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EAAEC,OAAO,EAAE;AAAsB,CAAC,CAAC;AAE5DF,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,GAAG,IAAK;EAClC,IAAGC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,EAAC;IAC/BF,GAAG,CAACG,OAAO,CAACC,aAAa,GAAI,UAASC,IAAI,CAACC,KAAK,CAACL,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,CAAC,CAACK,KAAM,EAAC;EAC7F;EACA,OAAOP,GAAG;AACd,CAAC,CAAC;AAEF,OAAO,MAAMQ,KAAK,GAAIC,QAAQ,IAAKf,GAAG,CAACgB,IAAI,CAAC,aAAa,EAAED,QAAQ,CAAC;AACpE,OAAO,MAAME,MAAM,GAAIF,QAAQ,IAAKf,GAAG,CAACgB,IAAI,CAAC,cAAc,EAAED,QAAQ,CAAC;AAEtE,OAAO,MAAMG,YAAY,GAAIC,YAAY,IAAKnB,GAAG,CAACgB,IAAI,CAAC,gBAAgB,EAAEG,YAAY,CAAC;AACtF,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAMpB,GAAG,CAACqB,GAAG,CAAC,gBAAgB,CAAC;AAC9D,OAAO,MAAMC,cAAc,GAAIC,EAAE,IAAKvB,GAAG,CAACwB,MAAM,CAAE,qBAAoBD,EAAG,EAAC,CAAC;AAC3E,OAAO,MAAME,YAAY,GAAGA,CAACF,EAAE,EAAEG,KAAK,KAAM1B,GAAG,CAAC2B,KAAK,CAAE,mBAAkBJ,EAAG,EAAC,EAAE;EAAEG;AAAM,CAAC,CAAC;AAEzF,OAAO,MAAME,UAAU,GAAGA,CAACL,EAAE,EAAEM,WAAW,EAAEC,UAAU,EAAEC,YAAY,KAAM/B,GAAG,CAAC2B,KAAK,CAAE,gBAAeJ,EAAG,EAAC,EAAE;EAAEM,WAAW;EAAEC,UAAU;EAAEC;AAAa,CAAC,CAAC;AACpJ,OAAO,MAAMC,YAAY,GAAGA,CAACT,EAAE,EAAEU,QAAQ,EAAEJ,WAAW,KAAK7B,GAAG,CAAC2B,KAAK,CAAE,kBAAiBJ,EAAG,EAAC,EAAE;EAAEU,QAAQ;EAAEJ;AAAW,CAAC,CAAC;AAEtH,OAAO,MAAMK,WAAW,GAAGA,CAAA,KAAMlC,GAAG,CAACqB,GAAG,CAAC,mBAAmB,CAAC;AAC7D,OAAO,MAAMc,aAAa,GAAGA,CAACZ,EAAE,EAAEa,UAAU,KAAKpC,GAAG,CAAC2B,KAAK,CAAE,gBAAeJ,EAAG,EAAC,EAAEa,UAAU,CAAC;AAE5F,OAAO,MAAMC,WAAW,GAAIC,IAAI,IAAKtC,GAAG,CAACgB,IAAI,CAAE,eAAc,EAAEsB,IAAI,CAAC;AACpE,OAAO,MAAMC,UAAU,GAAIhB,EAAE,IAAKvB,GAAG,CAACqB,GAAG,CAAE,oBAAmBE,EAAG,EAAC,CAAC;AACnE,OAAO,MAAMiB,aAAa,GAAGA,CAACjB,EAAE,EAACe,IAAI,KAAKtC,GAAG,CAAC2B,KAAK,CAAE,sBAAqBJ,EAAG,EAAC,EAAEe,IAAI,CAAC;AACrF,OAAO,MAAMG,aAAa,GAAIlB,EAAE,IAAKvB,GAAG,CAACwB,MAAM,CAAE,uBAAsBD,EAAG,EAAC,CAAC;AAE5E,OAAO,MAAMmB,WAAW,GAAGA,CAACC,GAAG,EAACC,GAAG,KAAK5C,GAAG,CAACqB,GAAG,CAAE,iBAAgBsB,GAAI,QAAOC,GAAI,EAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}