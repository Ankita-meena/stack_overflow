{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ankita\\\\Desktop\\\\stackoverflow-main\\\\stackoverflow-main\\\\frontend\\\\src\\\\components\\\\Chatbot\\\\Chatbot.jsx\",\n  _s = $RefreshSig$();\n/*import React, { useState } from 'react';\r\nimport LeftSidebar from \"../../components/LeftSidebar/LeftSidebar\";\r\nimport './Chatbot.css';\r\n\r\nconst Chatbot = () => {\r\n  const [phoneNumber, setPhoneNumber] = useState('');\r\n  const [otp, setOTP] = useState('');\r\n  const [question, setQuestion] = useState('');\r\n  const [answer, setAnswer] = useState('');\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n\r\n  const handleAuthenticate = () => {\r\n    // Simulate authentication by setting the error message if the phone number is empty\r\n    if (phoneNumber.trim() === '') {\r\n      setErrorMessage('Phone number is required.');\r\n    } else {\r\n      setErrorMessage('');\r\n      // Handle successful authentication (you can perform additional validation here if needed)\r\n    }\r\n  };\r\n\r\n  const handleChat = () => {\r\n    // Simulate chatbot response by setting the answer if the question is not empty\r\n    if (question.trim() === '') {\r\n      setErrorMessage('Question is required.');\r\n    } else {\r\n      setErrorMessage('');\r\n      // Simulate chatbot response\r\n      setAnswer('This is a sample answer from the chatbot.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <LeftSidebar />\r\n      <h1>Chatbot</h1>\r\n      <div className=\"input-group\">\r\n        <label htmlFor=\"phone-number\">Phone Number:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"phone-number\"\r\n          value={phoneNumber}\r\n          onChange={(e) => setPhoneNumber(e.target.value)}\r\n        />\r\n      </div>\r\n      <button className=\"authenticate-btn\" onClick={handleAuthenticate}>\r\n        Authenticate\r\n      </button>\r\n      <div className=\"input-group\">\r\n        <label htmlFor=\"otp\">OTP:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"otp\"\r\n          value={otp}\r\n          onChange={(e) => setOTP(e.target.value)}\r\n        />\r\n      </div>\r\n      <div className=\"input-group\">\r\n        <label htmlFor=\"question\">Question:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"question\"\r\n          value={question}\r\n          onChange={(e) => setQuestion(e.target.value)}\r\n        />\r\n      </div>\r\n      <button className=\"chat-btn\" onClick={handleChat}>\r\n        Chat\r\n      </button>\r\n      {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\r\n      {answer && <p className=\"answer\">Answer: {answer}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;*/\n\nimport React, { useState } from 'react';\nimport LeftSidebar from \"../../components/LeftSidebar/LeftSidebar\";\nimport './Chatbot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [phoneNumber, setPhoneNumber] = useState('');\n  const [otp, setOTP] = useState('');\n  const [question, setQuestion] = useState('');\n  const [answer, setAnswer] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const handleAuthenticate = () => {\n    // Simulate authentication by setting the error message if the phone number or OTP is empty\n    if (phoneNumber.trim() === '') {\n      setErrorMessage('Phone number is required.');\n    } else if (otp.trim() === '') {\n      setErrorMessage('OTP is required.');\n    } else {\n      setErrorMessage('');\n      // Handle successful authentication (you can perform additional validation here if needed)\n    }\n  };\n\n  const handleChat = () => {\n    // Simulate chatbot response by setting the answer if the question is not empty\n    if (question.trim() === '') {\n      setErrorMessage('Question is required.');\n    } else {\n      setErrorMessage('');\n      // Simulate chatbot response\n      setAnswer('This is a sample answer from the chatbot.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(LeftSidebar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chatbot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"phone-number\",\n        children: \"Phone Number:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"phone-number\",\n        value: phoneNumber,\n        onChange: e => setPhoneNumber(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"authenticate-btn\",\n      onClick: handleAuthenticate,\n      children: \"Authenticate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), otp && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"otp\",\n          children: \"OTP:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"otp\",\n          value: otp,\n          onChange: e => setOTP(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"question\",\n          children: \"Question:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"question\",\n          value: question,\n          onChange: e => setQuestion(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"chat-btn\",\n        onClick: handleChat,\n        children: \"Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-message\",\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 28\n      }, this), answer && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"answer\",\n        children: [\"Answer: \", answer]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"l6ekwi9BVS0+jnFzLelLalY721Q=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","LeftSidebar","jsxDEV","_jsxDEV","Fragment","_Fragment","Chatbot","_s","phoneNumber","setPhoneNumber","otp","setOTP","question","setQuestion","answer","setAnswer","errorMessage","setErrorMessage","handleAuthenticate","trim","handleChat","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","id","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Ankita/Desktop/stackoverflow-main/stackoverflow-main/frontend/src/components/Chatbot/Chatbot.jsx"],"sourcesContent":["/*import React, { useState } from 'react';\r\nimport LeftSidebar from \"../../components/LeftSidebar/LeftSidebar\";\r\nimport './Chatbot.css';\r\n\r\nconst Chatbot = () => {\r\n  const [phoneNumber, setPhoneNumber] = useState('');\r\n  const [otp, setOTP] = useState('');\r\n  const [question, setQuestion] = useState('');\r\n  const [answer, setAnswer] = useState('');\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n\r\n  const handleAuthenticate = () => {\r\n    // Simulate authentication by setting the error message if the phone number is empty\r\n    if (phoneNumber.trim() === '') {\r\n      setErrorMessage('Phone number is required.');\r\n    } else {\r\n      setErrorMessage('');\r\n      // Handle successful authentication (you can perform additional validation here if needed)\r\n    }\r\n  };\r\n\r\n  const handleChat = () => {\r\n    // Simulate chatbot response by setting the answer if the question is not empty\r\n    if (question.trim() === '') {\r\n      setErrorMessage('Question is required.');\r\n    } else {\r\n      setErrorMessage('');\r\n      // Simulate chatbot response\r\n      setAnswer('This is a sample answer from the chatbot.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <LeftSidebar />\r\n      <h1>Chatbot</h1>\r\n      <div className=\"input-group\">\r\n        <label htmlFor=\"phone-number\">Phone Number:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"phone-number\"\r\n          value={phoneNumber}\r\n          onChange={(e) => setPhoneNumber(e.target.value)}\r\n        />\r\n      </div>\r\n      <button className=\"authenticate-btn\" onClick={handleAuthenticate}>\r\n        Authenticate\r\n      </button>\r\n      <div className=\"input-group\">\r\n        <label htmlFor=\"otp\">OTP:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"otp\"\r\n          value={otp}\r\n          onChange={(e) => setOTP(e.target.value)}\r\n        />\r\n      </div>\r\n      <div className=\"input-group\">\r\n        <label htmlFor=\"question\">Question:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"question\"\r\n          value={question}\r\n          onChange={(e) => setQuestion(e.target.value)}\r\n        />\r\n      </div>\r\n      <button className=\"chat-btn\" onClick={handleChat}>\r\n        Chat\r\n      </button>\r\n      {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\r\n      {answer && <p className=\"answer\">Answer: {answer}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;*/\r\n\r\nimport React, { useState } from 'react';\r\nimport LeftSidebar from \"../../components/LeftSidebar/LeftSidebar\";\r\nimport './Chatbot.css';\r\n\r\nconst Chatbot = () => {\r\n  const [phoneNumber, setPhoneNumber] = useState('');\r\n  const [otp, setOTP] = useState('');\r\n  const [question, setQuestion] = useState('');\r\n  const [answer, setAnswer] = useState('');\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n\r\n  const handleAuthenticate = () => {\r\n    // Simulate authentication by setting the error message if the phone number or OTP is empty\r\n    if (phoneNumber.trim() === '') {\r\n      setErrorMessage('Phone number is required.');\r\n    } else if (otp.trim() === '') {\r\n      setErrorMessage('OTP is required.');\r\n    } else {\r\n      setErrorMessage('');\r\n      // Handle successful authentication (you can perform additional validation here if needed)\r\n    }\r\n  };\r\n\r\n  const handleChat = () => {\r\n    // Simulate chatbot response by setting the answer if the question is not empty\r\n    if (question.trim() === '') {\r\n      setErrorMessage('Question is required.');\r\n    } else {\r\n      setErrorMessage('');\r\n      // Simulate chatbot response\r\n      setAnswer('This is a sample answer from the chatbot.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <LeftSidebar />\r\n      <h1>Chatbot</h1>\r\n      <div className=\"input-group\">\r\n        <label htmlFor=\"phone-number\">Phone Number:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"phone-number\"\r\n          value={phoneNumber}\r\n          onChange={(e) => setPhoneNumber(e.target.value)}\r\n        />\r\n      </div>\r\n      <button className=\"authenticate-btn\" onClick={handleAuthenticate}>\r\n        Authenticate\r\n      </button>\r\n      {otp && (\r\n        <>\r\n          <div className=\"input-group\">\r\n            <label htmlFor=\"otp\">OTP:</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"otp\"\r\n              value={otp}\r\n              onChange={(e) => setOTP(e.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"input-group\">\r\n            <label htmlFor=\"question\">Question:</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"question\"\r\n              value={question}\r\n              onChange={(e) => setQuestion(e.target.value)}\r\n            />\r\n          </div>\r\n          <button className=\"chat-btn\" onClick={handleChat}>\r\n            Chat\r\n          </button>\r\n          {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\r\n          {answer && <p className=\"answer\">Answer: {answer}</p>}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}